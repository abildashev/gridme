/*******************************************************************************
 * Copyright (c) 2009 Dmitry Grushin <dgrushin@gmail.com>.
 * 
 * This file is part of GridMe.
 * 
 * GridMe is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * GridMe is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GridMe.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Contributors:
 *     Dmitry Grushin <dgrushin@gmail.com> - initial API and implementation
 ******************************************************************************/
package statemachine.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.*;

import statemachine.util.StatemachineAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class StatemachineItemProviderAdapterFactory extends StatemachineAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatemachineItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link statemachine.Named} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NamedItemProvider namedItemProvider;

  /**
   * This creates an adapter for a {@link statemachine.Named}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createNamedAdapter()
  {
    if (namedItemProvider == null)
    {
      namedItemProvider = new NamedItemProvider(this);
    }

    return namedItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link statemachine.GState} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GStateItemProvider gStateItemProvider;

  /**
   * This creates an adapter for a {@link statemachine.GState}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGStateAdapter()
  {
    if (gStateItemProvider == null)
    {
      gStateItemProvider = new GStateItemProvider(this);
    }

    return gStateItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link statemachine.Transition} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TransitionItemProvider transitionItemProvider;

  /**
   * This creates an adapter for a {@link statemachine.Transition}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTransitionAdapter()
  {
    if (transitionItemProvider == null)
    {
      transitionItemProvider = new TransitionItemProvider(this);
    }

    return transitionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link statemachine.GCompositeState} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GCompositeStateItemProvider gCompositeStateItemProvider;

  /**
   * This creates an adapter for a {@link statemachine.GCompositeState}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGCompositeStateAdapter()
  {
    if (gCompositeStateItemProvider == null)
    {
      gCompositeStateItemProvider = new GCompositeStateItemProvider(this);
    }

    return gCompositeStateItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link statemachine.GStartState} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GStartStateItemProvider gStartStateItemProvider;

  /**
   * This creates an adapter for a {@link statemachine.GStartState}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGStartStateAdapter()
  {
    if (gStartStateItemProvider == null)
    {
      gStartStateItemProvider = new GStartStateItemProvider(this);
    }

    return gStartStateItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link statemachine.GStopState} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GStopStateItemProvider gStopStateItemProvider;

  /**
   * This creates an adapter for a {@link statemachine.GStopState}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGStopStateAdapter()
  {
    if (gStopStateItemProvider == null)
    {
      gStopStateItemProvider = new GStopStateItemProvider(this);
    }

    return gStopStateItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link statemachine.GStatemachine} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GStatemachineItemProvider gStatemachineItemProvider;

  /**
   * This creates an adapter for a {@link statemachine.GStatemachine}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGStatemachineAdapter()
  {
    if (gStatemachineItemProvider == null)
    {
      gStatemachineItemProvider = new GStatemachineItemProvider(this);
    }

    return gStatemachineItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link statemachine.CallAction} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CallActionItemProvider callActionItemProvider;

  /**
   * This creates an adapter for a {@link statemachine.CallAction}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCallActionAdapter()
  {
    if (callActionItemProvider == null)
    {
      callActionItemProvider = new CallActionItemProvider(this);
    }

    return callActionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link statemachine.Parameter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParameterItemProvider parameterItemProvider;

  /**
   * This creates an adapter for a {@link statemachine.Parameter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createParameterAdapter()
  {
    if (parameterItemProvider == null)
    {
      parameterItemProvider = new ParameterItemProvider(this);
    }

    return parameterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link statemachine.GetParameter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GetParameterItemProvider getParameterItemProvider;

  /**
   * This creates an adapter for a {@link statemachine.GetParameter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGetParameterAdapter()
  {
    if (getParameterItemProvider == null)
    {
      getParameterItemProvider = new GetParameterItemProvider(this);
    }

    return getParameterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link statemachine.Call} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CallItemProvider callItemProvider;

  /**
   * This creates an adapter for a {@link statemachine.Call}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCallAdapter()
  {
    if (callItemProvider == null)
    {
      callItemProvider = new CallItemProvider(this);
    }

    return callItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link statemachine.StringValue} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StringValueItemProvider stringValueItemProvider;

  /**
   * This creates an adapter for a {@link statemachine.StringValue}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStringValueAdapter()
  {
    if (stringValueItemProvider == null)
    {
      stringValueItemProvider = new StringValueItemProvider(this);
    }

    return stringValueItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link statemachine.BooleanValue} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BooleanValueItemProvider booleanValueItemProvider;

  /**
   * This creates an adapter for a {@link statemachine.BooleanValue}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createBooleanValueAdapter()
  {
    if (booleanValueItemProvider == null)
    {
      booleanValueItemProvider = new BooleanValueItemProvider(this);
    }

    return booleanValueItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link statemachine.LongValue} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LongValueItemProvider longValueItemProvider;

  /**
   * This creates an adapter for a {@link statemachine.LongValue}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLongValueAdapter()
  {
    if (longValueItemProvider == null)
    {
      longValueItemProvider = new LongValueItemProvider(this);
    }

    return longValueItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (namedItemProvider != null) namedItemProvider.dispose();
    if (gStateItemProvider != null) gStateItemProvider.dispose();
    if (transitionItemProvider != null) transitionItemProvider.dispose();
    if (gCompositeStateItemProvider != null) gCompositeStateItemProvider.dispose();
    if (gStartStateItemProvider != null) gStartStateItemProvider.dispose();
    if (gStopStateItemProvider != null) gStopStateItemProvider.dispose();
    if (gStatemachineItemProvider != null) gStatemachineItemProvider.dispose();
    if (callActionItemProvider != null) callActionItemProvider.dispose();
    if (parameterItemProvider != null) parameterItemProvider.dispose();
    if (getParameterItemProvider != null) getParameterItemProvider.dispose();
    if (callItemProvider != null) callItemProvider.dispose();
    if (stringValueItemProvider != null) stringValueItemProvider.dispose();
    if (booleanValueItemProvider != null) booleanValueItemProvider.dispose();
    if (longValueItemProvider != null) longValueItemProvider.dispose();
  }

}
