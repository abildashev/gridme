«REM»
Copyright (c) 2008 Dmitry Grushin <dgrushin@gmail.com>.
 
This file is part of GridMe.
 
GridMe is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
 
GridMe is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
 
You should have received a copy of the GNU General Public License
along with GridMe.  If not, see <http://www.gnu.org/licenses/>.
 
Contributors:
  Dmitry Grushin <dgrushin@gmail.com> - initial API and implementation
«ENDREM»

«IMPORT statemachine»
«EXTENSION templates::Util»

«DEFINE Statemachine FOR GStatemachine»
«FILE packagePath(package) + getName(name) + ".java"»
/*******************************************************************************
 * Generated by GridMe modeling environment.
 * 
 * GridMe is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * GridMe is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GridMe.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
«IF package != null»
package «package»;
«ENDIF»
import com.googlecode.gridme.simstate.*;

/**
 * This is an implementation of «name» statemachine. 
 * To use it from an active element do the following:
 *
 * <ul>
 * <li>call setStatemachine(new «getName(name)»(this)) from the constructor.</li>
 *
 * <li>set parameters by calling this.statemachine.addParam(). See the class 
 * for a list of generated constants</li>
 *
 * <li>check that all actions referenced from the statemachine code are present. 
 * See the class for the list of generated constants.</li>
 * </ul>
 * 
 * The class will also contain a list of String constants for 
 * the used state names.  
 */
public class «getName(name)» extends Statemachine
{
  «FOREACH states AS state ITERATOR i-»
   «EXPAND stateConst(i.counter0) FOR state-»
  «ENDFOREACH-»

  «LET allActions(this) AS alist-»
  «IF !alist.isEmpty-»
  // A list of action constants
  «FOREACH allActions(this) AS action ITERATOR inum-»
  	«EXPAND actionId(inum.counter0) FOR action-»
  «ENDFOREACH-»
  «ENDIF-»
  «ENDLET-»

  «IF !states.isEmpty-»
  // A list of state names
  «EXPAND stateNameConst FOREACH states-»
  «ENDIF-»

  «IF !parameter.isEmpty-»
  // A list of parameters
  «EXPAND parameterConst FOREACH parameter-»
  «ENDIF-»

  private int currentState;
  private GSignal activeSignal;
  private boolean isFinished = false;
	
  public «getName(name)»(ActiveElement parent)
  {
  	super(parent);
  	activeSignal = null;
  	currentState = ST_start;
  	setCurrentStateName(STATE_start);
  }
	
  /**
   * If state machine is in stop state.
   * @return true, if machine has stopped
   */
  public boolean finished()
  {
  	return isFinished;
  }

  /**
   * Makes a transition.
   * @return true if at least one transition has been made.
   */
  public boolean run() throws Exception
  {
      boolean transition = false;
      int transitions = 0;
      
      do
      {
      	/*
          if(getParent().getExecControl().getStopCMD())
          {
            break;
          }
         */ 
      
          transition = false;
          
          switch(currentState)
  	      {
		     «EXPAND runState(transitions) FOREACH states-»
		     default:
		  }    
      }
      while(transition);
      
      return transitions > 0;
  }
  
  /**
   * Returns the signal which caused the transition.
   * @return Signal
   */
  public GSignal getActiveSignal()
  {
  	return activeSignal;
  }
  
  private void enterState(int state) throws Exception
  {
  	switch(state)
  	{
	  	«EXPAND makeEnterStateAction(transitions) FOREACH states»
	  	default:
  	}
	currentState = state;
  }
  
  private void leaveState(int state) throws Exception
  {
  	switch(state)
  	{
	  	«EXPAND makeLeaveStateAction FOREACH states»
	  	default:
  	}
  }
}
«ENDFILE»
«ENDDEFINE»

«DEFINE actionId(Integer num) FOR Call-»
public static final int «EXPAND actionName» = «num»;
«ENDDEFINE»

«DEFINE actionName FOR Call-»
ACTION_«actionId-»
«ENDDEFINE»

«DEFINE stateNameConst FOR GAbstractState-»
public static final String «EXPAND stateStr» = "«EXPAND stateRealName»";
«ENDDEFINE»

«DEFINE parameterConst FOR Parameter-»
public static final String «EXPAND parameterConstName» = "«name»";
«ENDDEFINE»

«DEFINE parameterConstName FOR Parameter-»
PARAM_«name-»
«ENDDEFINE»

«DEFINE makeEnterStateAction(Collection transitions) FOR GAbstractState»
case «EXPAND stateConStr»:
	«EXPAND doEnterAction FOREACH actions-»
	// set timers
	«EXPAND setTimer FOREACH getDelayedTransitions(transitions, this)-»
	// set state name
	setCurrentStateName(«EXPAND stateStr»);
	break;
«ENDDEFINE»

«REM»
Start and stop states can not have actions and timer transitions.
«ENDREM»
«DEFINE makeEnterStateAction(Collection transitions) FOR GStartState»«ENDDEFINE»

«DEFINE makeEnterStateAction(Collection transitions) FOR GStopState»
case «EXPAND stateConStr»:
	// set state name
	setCurrentStateName(«EXPAND stateStr»);
	isFinished = true;
	break;
«ENDDEFINE»

«DEFINE setTimer FOR Transition»
getParent().addTimer(new TransitionTimer("«name»", «EXPAND longValue FOR delay»));
«ENDDEFINE»

«DEFINE makeLeaveStateAction FOR GAbstractState»
case «EXPAND stateConStr»:
	«EXPAND doLeaveAction FOREACH actions»
	break;
«ENDDEFINE»

«REM»
Start and stop states can not have actions and timer transitions.
«ENDREM»

«DEFINE makeLeaveStateAction FOR GStartState»«ENDDEFINE»

«DEFINE makeLeaveStateAction FOR GStopState»«ENDDEFINE»

«DEFINE doEnterAction FOR GAbstractAction»
«IF kind == ActionKind::ENTRY-»
«EXPAND doAction-»
«ENDIF»
«ENDDEFINE»

«DEFINE doLeaveAction FOR GAbstractAction»
«IF kind == ActionKind::EXIT-»
«EXPAND doAction-»
«ENDIF»
«ENDDEFINE»

«DEFINE doAction FOR GAbstractAction»«ENDDEFINE»

«DEFINE doAction FOR CallAction»
getParent().action(«EXPAND actionName FOR call»);
«ENDDEFINE»

«DEFINE runState(Collection[Transition] transitions) FOR GAbstractState-»
case «EXPAND stateConStr»:
	    «EXPAND allEmptyTransitions FOREACH getOutTransitions(transitions, this)-»
	    «EXPAND allDelayedTransitions FOREACH getOutTransitions(transitions, this)-»
	    «EXPAND allSignalTransitions FOREACH getOutTransitions(transitions, this)-»
	    break;
«ENDDEFINE»

«DEFINE runState FOR GStopState-»«ENDDEFINE»

«DEFINE allEmptyTransitions FOR Transition-»
    «IF signals.size == 0 && delay == null-»
         // no signal transition
        «EXPAND doTransition-»
    «ENDIF»
«ENDDEFINE»

«DEFINE allDelayedTransitions FOR Transition-»
    «IF delay != null»
        if(getParent().getReadyTimer("«name»") != null)
        {
        	«EXPAND doTransition-»
        }
    «ENDIF»
«ENDDEFINE»

«DEFINE allSignalTransitions FOR Transition-»
    «IF signals.size > 0»
      «EXPAND makeSignalTransition(this) FOREACH signals»
    «ENDIF»
«ENDDEFINE»

«DEFINE makeSignalTransition(Transition transition) FOR Value-»
    	activeSignal = getParent().checkSignal(«EXPAND signalClass»);
    	if(activeSignal != null)
    	{
    		«EXPAND doTransition FOR transition-»
    	}
«ENDDEFINE»

«DEFINE doTransition FOR Transition-»
	    if(«IF guard != null»«EXPAND booleanValue FOR guard»«ELSE»true«ENDIF»)
	    {
	        leaveState(«EXPAND stateConStr FOR from»);
	        «IF !preserveTimers»
	        // reset all timers
			getParent().clearTimers();
			«ENDIF»
	        enterState(«EXPAND stateConStr FOR to»);
	        transition = true;
			transitions++;
	        break;
	    }
«ENDDEFINE»

«DEFINE booleanValue FOR Value»ConvertUtils.makeBooleanValue(«EXPAND makeValue»)«ENDDEFINE»

«DEFINE longValue FOR Value»ConvertUtils.makeLongValue(«EXPAND makeValue»)«ENDDEFINE»

«DEFINE makeValue FOR Value»«ENDDEFINE»

«DEFINE makeValue FOR GetParameter»getParam(«EXPAND parameterConstName FOR parameter»)«ENDDEFINE»

«DEFINE makeValue FOR Call»getParent().action(«EXPAND actionName»)«ENDDEFINE»

«DEFINE makeValue FOR StringValue»"«value»"«ENDDEFINE»

«DEFINE makeValue FOR LongValue»Long.valueOf(«value»)«ENDDEFINE»

«DEFINE makeValue FOR BooleanValue»Boolean.valueOf("«value»")«ENDDEFINE»

«REM»
Signal handling
«ENDREM»

«DEFINE signalClass FOR Value»«ENDDEFINE»

«DEFINE signalClass FOR StringValue»«value».class«ENDDEFINE»

«DEFINE signalClass FOR Call»(Class<? extends GSignal>)«EXPAND makeValue»«ENDDEFINE»

«DEFINE signalClass FOR GetParameter»(Class<? extends GSignal>)«EXPAND makeValue»«ENDDEFINE»

«REM»
state provides a name for the enum constant
«ENDREM»

«DEFINE stateConst(int i) FOR GAbstractState-»
private static final int «EXPAND stateConStr» = «i»;
«ENDDEFINE»

«REM»
stateConStr provides a name for the integer constant 
which defines state value
«ENDREM»

«DEFINE stateConStr FOR GAbstractState»«ENDDEFINE»

«DEFINE stateConStr FOR GState»ST_«name»«ENDDEFINE»

«DEFINE stateConStr FOR GStartState»ST_start«ENDDEFINE»

«DEFINE stateConStr FOR GStopState»ST_stop«ENDDEFINE»


«REM»
stateStr provides a name for the string constant 
which defines real state name
«ENDREM»

«DEFINE stateStr FOR GAbstractState»«ENDDEFINE»

«DEFINE stateStr FOR GState»STATE_«name»«ENDDEFINE»

«DEFINE stateStr FOR GStartState»STATE_start«ENDDEFINE»

«DEFINE stateStr FOR GStopState»STATE_stop«ENDDEFINE»

«REM»
stateRealName provides a real state name as provided by user. For each state
corresponding string constant is generated. See stateNameConst template. 
«ENDREM»

«DEFINE stateRealName FOR GAbstractState»«ENDDEFINE»

«DEFINE stateRealName FOR GStartState»start«ENDDEFINE»

«DEFINE stateRealName FOR GStopState»stop«ENDDEFINE»

«DEFINE stateRealName FOR GState»«name»«ENDDEFINE»
